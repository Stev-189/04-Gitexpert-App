{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAmB9C,OAEE,aADA,CACA,QAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAOhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EAERU,SAvBoB,SAAAP,GAExBF,EAAcE,EAAEQ,OAAOF,a,QCNdG,EAAc,SAAC,GAAoB,EAAnBC,GAAoB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAErC,OAEE,cAFM,CAEN,OAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNIK,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,kDACkCO,UAAUF,GAD5C,+DAEFG,MAAMR,GAFJ,cAEfS,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACzB,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARjB,kBAWdY,GAXc,4CAAF,sDCIRK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRjB,EAAQC,GACPiB,MAAK,SAAAC,GACJH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGb,CAACb,IAEIc,EDT0BK,CAAanB,GAAhCU,EANuB,EAM7BJ,KAAcO,EANe,EAMfA,QAkCtB,OACE,qCACE,qBAAIjB,UAAW,oCAAf,cAAqDI,EAArD,OAICa,GAAW,2CACZ,qBAAKjB,UAAU,YAAf,SAkBIc,EAAOF,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAGMA,GAFEA,EAAIhB,aErEX2B,EAAc,WAAI,MAGOzC,mBAAS,CAAC,kBAHjB,mBAGtB0C,EAHsB,KAGV3C,EAHU,KAa7B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BASI2C,EAAWb,KAAI,SAAAR,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAYA,GADLA,Y,MC7BrBsB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e24d70e7.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\nimport PropTypes from 'prop-types';// para usar propiedades en nuestras funciones o componentes\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');// es obligatorio al usar el use state colocar unb valor inicial \r\n\r\n  const handleInputChange = e=>{\r\n    // console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n    //haci actualizamos el texbox de arriva se hace un use state y refresca lo escrito\r\n    // con esta funcion el imputValue simpre estara actualizado\r\n  }\r\n\r\n  const handleSubmit=e=>{\r\n    e.preventDefault();\r\n    if(inputValue.trim().length>2){// validamos que no sea  un elemento vacioy eliminamos los espacioniniciales y finales\r\n      setCategories(cats=>[ inputValue, ...cats,]);// como envimaoms el setcategories con la funccion addcategory\r\n      setInputValue('');// limpiamos el contenido del input\r\n    }\r\n    //estal ainvocmoas como los props, y ademas la desestructuramos\r\n  }\r\n\r\n  return (\r\n    // <> // al usarun form ya sirve como fragment\r\n    <form onSubmit={ handleSubmit }>\r\n      < input\r\n        type='text'\r\n        value={ inputValue }\r\n        // onChange= { e=>console.log(e) }\r\n        onChange= { handleInputChange }//cunado escriva algo se ejecuta eÃ±l usestate y refresca imput\r\n      />\r\n    </form>\r\n    // </> // al usarun form ya sirve como fragment\r\n  )\r\n}\r\n\r\nAddCategory.propTypes ={setCategories: PropTypes.func.isRequired} // le obligamos el usuario a que nos envie la funcion\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title,url}) => {//{...img} recivido de gifgrid\r\n  // console.log({id, title,url});\r\n  return (//render imagen junsto a su titulo\r\n    //clas es una palabra recersavda de javascript porlotanto aqui se usa classname\r\n    <div className='card animate__animated animate__zoomIn'>\r\n      <img src={url} alt={title}/>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","\r\n\r\n export const getGifs= async (category)=>{\r\n  const url =`https://api.giphy.com/v1/gifs/search?&q=${ encodeURI(category)}&limit=10&api_key=I148jVo474BYYIbVckgOwBC5Xbc1du8m`\r\n  const resp = await fetch(url);\r\n  const {data} = await resp.json();\r\n  const gifs = data.map(img=>{\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n  // const [images, setImages] = useState([])\r\n\r\n  //custom hooks\r\n  const { data: images, loading} = useFetchGifs(category);\r\n  \r\n\r\n\r\n  // //al realisar un usestate se ejecuta toda la funcion denuevo lo que hace que se ejecute la fetch nuevamente\r\n  // //si usame useEffect solo se ejecutar la primera ves la funcion de la fetch\r\n  // useEffect(()=>{\r\n  //   // getGifs()// llamamos al helpers de busqueda de imagenes\r\n  //   getGifs(category)\r\n  //     .then(setImages);\r\n  // }, [category])\r\n\r\n\r\n  // }, [])// al estare esta array vacio solo ejecuta el getgidt solo 1 vez y no cada vez que lo solicite el\r\n  //el usestate\r\n  // ejemplo de fetch asincrona optimmisando los resultados\r\n  // const getGifs= async ()=>{\r\n  //   const url =`https://api.giphy.com/v1/gifs/search?&q=${ encodeURI(category)}&limit=10&api_key=I148jVo474BYYIbVckgOwBC5Xbc1du8m`\r\n  //   //encodeURI() completa los espacios ( ) por mas (+)\r\n  //   const resp = await fetch(url);\r\n  //   // const data = await resp.json();// desestructuramos y solo sacamos la data\r\n  //   const {data} = await resp.json();// desestructuramos y solo sacamos la data\r\n  //   const gifs = data.map(img=>{// generemos un array solo con los datos nesesarios\r\n  //     return {\r\n  //       id: img.id,\r\n  //       title: img.title,\r\n  //       url: img.images?.downsized_medium.url//es apra validar que traiga imagenes\r\n  //     }\r\n  //   })\r\n  //   console.log(gifs);\r\n  //   setImages(gifs);\r\n  // }\r\n\r\n  \r\n  return (\r\n    <>\r\n      <h3 className= 'animate__animated animate__zoomIn'> {category} </h3>\r\n\r\n      {/* custom hooks */}\r\n      {/* loading?'Cargando...':'Data Cargada' */}\r\n      {loading && <p>Loading...</p>}{/* se usa && para solo validar y hacerr algo enves de usa ?: */}\r\n      <div className='card-grid'>\r\n        {/* <ol>\r\n          {\r\n            // images.map(img=>{return <li key={img.id}> {img.title} </li>})// esta bine pero le profe\r\n          // images.map(({id, title})=><li key={id}> {title} </li>)// esta bien pero el profe\r\n        }\r\n        </ol> */}\r\n        {/* {\r\n          images.map(img=>\r\n            <GifGridItem \r\n              key= {img.id}//no se envio la key se genero aqui\r\n              // img={img}\r\n              {...img} // es lo mismo que le de arriba\r\n              />)// render con componente\r\n        } */}\r\n\r\n        {/* custom Hooks */}\r\n        {\r\n          images.map(img=>\r\n            <GifGridItem \r\n              key= {img.id}//no se envio la key se genero aqui\r\n              // img={img}\r\n              {...img} // es lo mismo que le de arriba\r\n              />)// render con componente\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n// los custom hooks son fnciones que nesesariamente no retornan jsx \r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(()=>{\r\n    getGifs(category)// ejecuta fetch\r\n    .then(imgs=>{// resultado positivo\r\n      setState({\r\n        data: imgs,\r\n        loading: false\r\n      });\r\n    })\r\n  },[category])// solo se ejecutar cunado la category cambie\r\n\r\n  return state;//es le objeto\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp =()=>{\r\n\r\n  //const categories =['One Pucha','Samurai X','Dragon Ball'] // no usar a menos que se elemento unico y no modificable\r\n  const [categories, setCategories] = useState(['One Punch Man'])// como va avariaar usar useState\r\n  \r\n  //agregamos elemnto al array y renderisamos\r\n  // const handleAdd=_=>{\r\n  //   // setCategories([...categories, 'HunterXHunter'])//AGREGA AL FINAL copia original y agrega\r\n  //   // setCategories(['HunterXHunter', ...categories])//AGRGA AL INICIO\r\n  //   setCategories(cats=>[...cats, 'HunterXHunter'])\r\n  // };\r\n\r\n  \r\n  return(\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories= { setCategories }/>{/* enviamosla funcion set categoreies alo add categories */}\r\n      <hr></hr>\r\n      {/* <button onClick={handleAdd}> Agregar </button> */}\r\n      <ol>\r\n        \r\n        {// para agregar javascriot\r\n          // se itera la renderizacion\r\n          // categories.map(category=>{\r\n          //   //siempre debe llevar una key unica en este caso usaremos las categorias del array\r\n          //   //la key no s epouede repetir\r\n          //   return <li key={category}> {category} </li>\r\n          // })\r\n          categories.map(category=>\r\n            <GifGrid \r\n              key = {category}\r\n              category= { category }\r\n            /> //envimaos a gif grid category que es el elemento category dle siclo osea dle array\r\n          )\r\n          \r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}